{"version":3,"sources":["theme.js","components/WaveInput.jsx","App.js","serviceWorker.js","index.js"],"names":["theme","createTheme","palette","type","WaveInput","props","React","useState","waveMessage","setWaveMessage","wave","a","window","ethereum","provider","ethers","providers","Web3Provider","signer","getSigner","waveportalContract","Contract","contractAddress","contractABI","getTotalWaves","count","console","log","toNumber","gasLimit","waveTxn","hash","wait","Input","placeholder","onChange","e","target","value","style","margin","Button","onClick","variant","App","currentAccount","setCurrentAccount","lastWaver","setLastWaver","allWaves","setAllWaves","abi","checkIfWalletIsConnected","request","method","accounts","length","account","getAllWaves","getLastWaver","connectWallet","alert","wavePortalContract","waves","wavesCleaned","forEach","push","address","waver","timestamp","Date","message","on","from","prevState","toString","ThemeProvider","CssBaseline","height","textAlign","Typography","role","aria-label","className","map","index","key","marginTop","padding","border","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+hrBASeA,EANDC,YAAY,CACxBC,QAAS,CACPC,KAAM,U,iBCiDKC,MA/Cf,SAAmBC,GAGf,MAAsCC,IAAMC,SAAS,IAArD,mBAAOC,EAAP,KAAoBC,EAApB,KAEMC,EAAI,uCAAG,wCAAAC,EAAA,oEAEcC,SAAbC,EAFD,EAECA,UAFD,wBAKCC,EAAW,IAAIC,IAAOC,UAAUC,aAAaJ,GAC7CK,EAASJ,EAASK,YAClBC,EAAqB,IAAIL,IAAOM,SAClChB,EAAMiB,gBACNjB,EAAMkB,YACRL,GAVG,SAaaE,EAAmBI,gBAbhC,cAaDC,EAbC,OAcLC,QAAQC,IAAI,gCAAiCF,EAAMG,YAd9C,UAgBiBR,EAAmBV,KAAKF,EAAa,CAAEqB,SAAU,MAhBlE,eAgBCC,EAhBD,OAiBLJ,QAAQC,IAAI,YAAaG,EAAQC,MAjB5B,UAmBCD,EAAQE,OAnBT,eAoBLN,QAAQC,IAAI,YAAaG,EAAQC,MApB5B,UAsBSX,EAAmBI,gBAtB5B,QAsBLC,EAtBK,OAuBLC,QAAQC,IAAI,gCAAiCF,EAAMG,YAvB9C,wBAyBLF,QAAQC,IAAI,kCAzBP,0DA4BPD,QAAQC,IAAR,MA5BO,0DAAH,qDAgCZ,OACE,6BACE,kBAACM,EAAA,EAAD,CAAO9B,KAAK,OAAO+B,YAAY,qBAAqBC,SAAU,SAACC,GAAD,OAAO3B,EAAe2B,EAAEC,OAAOC,QAAQC,MAAO,CAACC,OAAQ,SACrH,kBAACC,EAAA,EAAD,CAAQC,QAAShC,EAAMiC,QAAQ,aAA/B,gBClCS,SAASC,IAItB,MAA4CtC,WAAe,IAA3D,mBAAOuC,EAAP,KAAuBC,EAAvB,KACA,EAAkCxC,WAAe,IAAjD,mBAAOyC,EAAP,KAAkBC,EAAlB,KACA,EAAgC1C,WAAe,IAA/C,mBAAO2C,EAAP,KAAiBC,EAAjB,KAEM5B,EAAkB,6CAElBC,EAAc4B,EAAIA,IAElBC,EAAwB,uCAAG,kCAAAzC,EAAA,oEAERC,OAAbC,EAFqB,EAErBA,SAFqB,uBAK3Ba,QAAQC,IAAI,gCALe,0BAQ3BD,QAAQC,IAAI,8BAA+Bd,GARhB,wBAcNA,EAASwC,QAAQ,CAAEC,OAAQ,iBAdrB,QAgBL,KAFlBC,EAduB,QAgBhBC,QACLC,EAAUF,EAAS,GACzB7B,QAAQC,IAAI,+BAAgC8B,GAC5CX,EAAkBW,GAClBC,IACAC,KAEAjC,QAAQC,IAAI,+BAvBe,kDA0B7BD,QAAQC,IAAR,MA1B6B,0DAAH,qDA+BxBiC,EAAa,uCAAG,gCAAAjD,EAAA,oEAEGC,OAAbC,EAFU,EAEVA,SAFU,uBAKhBgD,MAAM,iBALU,0CASKhD,EAASwC,QAAQ,CACtCC,OAAQ,wBAVQ,OASZC,EATY,OAalB7B,QAAQC,IAAI,YAAa4B,EAAS,IAClCT,EAAkBS,EAAS,IAdT,kDAgBlB7B,QAAQC,IAAR,MAhBkB,0DAAH,qDAuBb+B,EAAW,uCAAG,wCAAA/C,EAAA,oEAEKC,SAAbC,EAFQ,EAERA,UAFQ,wBAIRC,EAAW,IAAIC,IAAOC,UAAUC,aAAaJ,GAC7CK,EAASJ,EAASK,YAClB2C,EAAqB,IAAI/C,IAAOM,SACpCC,EACAC,EACAL,GATY,SAeM4C,EAAmBJ,cAfzB,OAeRK,EAfQ,OAqBVC,EAAe,GACnBD,EAAME,SAAQ,SAACvD,GACbsD,EAAaE,KAAK,CAChBC,QAASzD,EAAK0D,MACdC,UAAW,IAAIC,KAAsB,IAAjB5D,EAAK2D,WACzBE,QAAS7D,EAAK6D,aAOlBrB,EAAYc,GAEZF,EAAmBU,GAAG,WAAW,SAACC,EAAMJ,EAAWE,GACjD7C,QAAQC,IAAI,UAAW8C,EAAMJ,EAAWE,GAExCrB,GAAY,SAACwB,GAAD,4BACPA,GADO,CAEV,CACEP,QAASM,EACTJ,UAAW,IAAIC,KAAiB,IAAZD,GACpBE,QAASA,WA3CD,wBAgDd7C,QAAQC,IAAI,kCAhDE,0DAmDhBD,QAAQC,IAAR,MAnDgB,0DAAH,qDA0DXgC,EAAY,uCAAG,sCAAAhD,EAAA,oEAEIC,SAAbC,EAFS,EAETA,UAFS,wBAITC,EAAW,IAAIC,IAAOC,UAAUC,aAAaJ,GAC7CK,EAASJ,EAASK,YAClB2C,EAAqB,IAAI/C,IAAOM,SACpCC,EACAC,EACAL,GATa,SAYS4C,EAAmBH,eAZ5B,OAYTZ,EAZS,OAcfC,EAAaD,EAAU4B,YAdR,wBAgBfjD,QAAQC,IAAI,kCAhBG,0DAmBjBD,QAAQC,IAAR,MAnBiB,0DAAH,qDA8BlB,OAJArB,aAAgB,WACd8C,MACC,IAGD,gBAACwB,EAAA,EAAD,CAAe5E,MAAOA,GACpB,gBAAC6E,EAAA,EAAD,MACA,uBAAKtC,MAAO,CAAEuC,OAAQ,QAASC,UAAW,WACxC,gBAACC,EAAA,EAAD,CAAYrC,QAAQ,MAAK,wBAAMsC,KAAK,MAAMC,aAAW,eAA5B,gBAAzB,6BACA,uBAAKC,UAAU,OAAf,0EAGE,2BAHF,kCAMEtC,EAGA,2BACGE,GAAa,yCAAiBA,GAC/B,gBAAC,EAAD,CACEzB,gBAAiBA,EACjBC,YAAaA,IAEd0B,EAASmC,KAAI,SAAC1E,EAAM2E,GACnB,OACE,uBACEC,IAAKD,EACL9C,MAAO,CACLgD,UAAW,OACXC,QAAS,MACTC,OAAQ,cAGV,gBAACT,EAAA,EAAD,CAAYrC,QAAQ,MAApB,QAA+B0C,GAC/B,uCAAe3E,EAAKyD,SACpB,oCAAYzD,EAAK2D,UAAUM,YAC3B,uCAAejE,EAAK6D,cArB5B,gBAAC9B,EAAA,EAAD,CAAQC,QAASkB,GAAjB,oBCvKU8B,QACW,cAA7B9E,OAAO+E,SAASC,UAEe,UAA7BhF,OAAO+E,SAASC,UAEhBhF,OAAO+E,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAACnD,EAAD,MAASoD,SAASC,eAAe,SD8H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.4d0e058f.chunk.js","sourcesContent":["import { createTheme } from \"@material-ui/core\";\n\n// A custom theme for this app\nconst theme = createTheme({\n  palette: {\n    type: \"dark\",\n  },\n});\n\nexport default theme;\n","import React from \"react\";\nimport { ethers } from \"ethers\";\nimport {\n  Input,\nButton\n} from \"@material-ui/core\";\n\nfunction WaveInput(props) {\n\n    \n    const [waveMessage, setWaveMessage] = React.useState(\"\");\n\n    const wave = async () => {\n        try {\n          const { ethereum } = window;\n    \n          if (ethereum) {\n            const provider = new ethers.providers.Web3Provider(ethereum);\n            const signer = provider.getSigner();\n            const waveportalContract = new ethers.Contract(\n                props.contractAddress,\n                props.contractABI,\n              signer\n            );\n    \n            let count = await waveportalContract.getTotalWaves();\n            console.log(\"Retrieved total wave count...\", count.toNumber());\n    \n            const waveTxn = await waveportalContract.wave(waveMessage, { gasLimit: 300000 });\n            console.log(\"Mining...\", waveTxn.hash);\n    \n            await waveTxn.wait();\n            console.log(\"Mined -- \", waveTxn.hash);\n    \n            count = await waveportalContract.getTotalWaves();\n            console.log(\"Retrieved total wave count...\", count.toNumber());\n          } else {\n            console.log(\"Ethereum object doesn't exist!\");\n          }\n        } catch (error) {\n          console.log(error);\n        }\n      };\n\n  return (\n    <div>\n      <Input type=\"text\" placeholder=\"Leave a message...\" onChange={(e) => setWaveMessage(e.target.value)} style={{margin: \"5px\"}}></Input>\n      <Button onClick={wave} variant=\"contained\">\n        Wave at Me\n      </Button>\n    </div>\n  );\n}\n\nexport default WaveInput;\n","import * as React from \"react\";\nimport { ethers } from \"ethers\";\nimport {\n  Button,\n  Typography,\n  ThemeProvider,\n  CssBaseline,\n} from \"@material-ui/core\";\nimport theme from \"./theme\";\nimport abi from \"./utils/WavePortal.json\";\n\nimport WaveInput from \"./components/WaveInput.jsx\";\n\nexport default function App() {\n  /*\n   * Just a state variable we use to store our user's public wallet.\n   */\n  const [currentAccount, setCurrentAccount] = React.useState(\"\");\n  const [lastWaver, setLastWaver] = React.useState(\"\");\n  const [allWaves, setAllWaves] = React.useState([]);\n\n  const contractAddress = \"0xF09BE6fFeEF0066eF9d0dCc9672D0D02AfeD08c7\";\n\n  const contractABI = abi.abi;\n\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        console.log(\"Make sure you have metamask!\");\n        return;\n      } else {\n        console.log(\"We have the ethereum object\", ethereum);\n      }\n\n      /*\n       * Check if we're authorized to access the user's wallet\n       */\n      const accounts = await ethereum.request({ method: \"eth_accounts\" });\n\n      if (accounts.length !== 0) {\n        const account = accounts[0];\n        console.log(\"Found an authorized account:\", account);\n        setCurrentAccount(account);\n        getAllWaves();\n        getLastWaver();\n      } else {\n        console.log(\"No authorized account found\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n\n  const connectWallet = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        alert(\"Get MetaMask!\");\n        return;\n      }\n\n      const accounts = await ethereum.request({\n        method: \"eth_requestAccounts\",\n      });\n\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  /*\n   * Create a method that gets all waves from your contract\n   */\n  const getAllWaves = async () => {\n    try {\n      const { ethereum } = window;\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const wavePortalContract = new ethers.Contract(\n          contractAddress,\n          contractABI,\n          signer\n        );\n\n        /*\n         * Call the getAllWaves method from your Smart Contract\n         */\n        const waves = await wavePortalContract.getAllWaves();\n\n        /*\n         * We only need address, timestamp, and message in our UI so let's\n         * pick those out\n         */\n        let wavesCleaned = [];\n        waves.forEach((wave) => {\n          wavesCleaned.push({\n            address: wave.waver,\n            timestamp: new Date(wave.timestamp * 1000),\n            message: wave.message,\n          });\n        });\n\n        /*\n         * Store our data in React State\n         */\n        setAllWaves(wavesCleaned);\n\n        wavePortalContract.on(\"NewWave\", (from, timestamp, message) => {\n          console.log(\"NewWave\", from, timestamp, message);\n\n          setAllWaves((prevState) => [\n            ...prevState,\n            {\n              address: from,\n              timestamp: new Date(timestamp * 1000),\n              message: message,\n            },\n          ]);\n        });\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  /*\n   * Method: Get Last Waver from the contract\n   */\n  const getLastWaver = async () => {\n    try {\n      const { ethereum } = window;\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const wavePortalContract = new ethers.Contract(\n          contractAddress,\n          contractABI,\n          signer\n        );\n\n        const lastWaver = await wavePortalContract.getLastWaver();\n\n        setLastWaver(lastWaver.toString());\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  /*\n   * This runs our function when the page loads.\n   */\n  React.useEffect(() => {\n    checkIfWalletIsConnected();\n  }, []);\n\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <div style={{ height: \"100vh\", textAlign: \"center\"}}>\n        <Typography variant=\"h3\"><span role=\"img\" aria-label=\"hand waving\">👋</span> Hey there! I am Stanley!</Typography>\n        <div className=\"bio\">\n          I am Stanley from Hong Kong! I love coding, games, basketball and\n          food!\n          <br />\n          Wave at me and lets be friend!\n        </div>\n        {!currentAccount ? (\n          <Button onClick={connectWallet}>Connect Wallet</Button>\n        ) : (\n          <div>\n            {lastWaver && <h3>Last Waver: {lastWaver}</h3>}\n            <WaveInput\n              contractAddress={contractAddress} \n              contractABI={contractABI}\n            />\n            {allWaves.map((wave, index) => {\n              return (\n                <div\n                  key={index}\n                  style={{\n                    marginTop: \"16px\",\n                    padding: \"8px\",\n                    border: \"5px solid\"\n                  }}\n                >\n                  <Typography variant=\"h4\">Wave {index}</Typography>\n                  <div>Address: {wave.address}</div>\n                  <div>Time: {wave.timestamp.toString()}</div>\n                  <div>Message: {wave.message}</div>\n                </div>\n              );\n            })}\n          </div>\n        )}\n      </div>\n    </ThemeProvider>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}